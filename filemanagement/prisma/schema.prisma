generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model file {
  id              String
  workspace_id    String
  user_id         String
  description     String?
  color           String?
  labels          String[]
  created_at      DateTime   @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at      DateTime   @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  pengesahan_pada DateTime?  @db.Timestamptz(6)
  is_self_file    Boolean?
  approvals       approval[] @relation("FileToApprovals")
  workspace       workspace  @relation(fields: [workspace_id, user_id], references: [id, user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id, workspace_id, user_id])
  @@index([id], map: "idx_file_id_lookup")
  @@index([pengesahan_pada], map: "idx_file_pengesahan_pada")
  @@index([workspace_id, user_id], map: "idx_file_workspace_user_id")
}

model folder {
  id             String
  workspace_id   String
  user_id        String
  description    String?
  color          String?
  labels         String[]
  created_at     DateTime  @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at     DateTime  @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  is_self_folder Boolean?
  workspace      workspace @relation(fields: [workspace_id, user_id], references: [id, user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id, workspace_id, user_id])
  @@index([id], map: "idx_folder_id_lookup")
  @@index([workspace_id, user_id], map: "idx_folder_workspace_user_id")
}

model onboarding_status {
  user_id      String   @id
  is_completed Boolean  @default(false)
  created_at   DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at   DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
}

model user {
  id                  String         @id
  displayname         String?
  primaryemail        String?
  is_admin            Boolean?       @default(false)
  approvals_to_action approval[]     @relation("ApprovalApprover")
  approvals_assigned  approval[]     @relation("ApprovalAssigner")
  notifications       notification[]
}

model workspace {
  id                String
  user_id           String
  url               String
  color             String?
  created_at        DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  name              String?
  is_self_workspace Boolean? @default(true)
  file              file[]
  folder            folder[]

  @@id([id, user_id])
  @@index([user_id], map: "idx_workspace_user_id")
}

model approval {
  id                    String    @default(cuid())
  file_id_ref           String
  file_workspace_id_ref String
  file_user_id_ref      String
  approver_user_id      String
  assigned_by_user_id   String
  status                String
  remarks               String?
  created_at            DateTime  @default(now()) @db.Timestamptz(6)
  updated_at            DateTime  @updatedAt @db.Timestamptz(6)
  actioned_at           DateTime? @db.Timestamptz(6)
  approver              user      @relation("ApprovalApprover", fields: [approver_user_id], references: [id])
  assigner              user      @relation("ApprovalAssigner", fields: [assigned_by_user_id], references: [id])
  file                  file      @relation("FileToApprovals", fields: [file_id_ref, file_workspace_id_ref, file_user_id_ref], references: [id, workspace_id, user_id], onDelete: Cascade)

  @@id([id, approver_user_id])
  @@index([file_id_ref, file_workspace_id_ref, file_user_id_ref])
  @@index([approver_user_id])
  @@index([assigned_by_user_id])
  @@index([status])
}

model notification {
  id                            String   @id @default(cuid()) @db.VarChar(30)
  user_id                       String
  message                       String
  type                          String?  @db.VarChar(255)
  link                          String?
  is_read                       Boolean  @default(false)
  created_at                    DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at                    DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  related_approval_process_cuid String?
  user                          user     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([user_id, is_read])
  @@index([related_approval_process_cuid], map: "idx_notification_related_approval_cuid")
}
